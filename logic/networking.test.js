const { startWebSocketServer } = require("./ws");
const { startRtcMockClient } = require("./client");
const { NetworkingWebRtcServer } = require("./networking");
const { JoinRequest } = require("../data/join_request");
const { JoinInfo } = require("../data/join_info");
const { LeaveInfo } = require("../data/leave_info");
const { RawData } = require("../data/raw");
const { GroupInfo } = require("../data/group_info");
const delay = (ms) => new Promise((resolve) => setTimeout(resolve, ms));

describe('Test networking webrtc server', () => {
    let port = 8083;
    let wss;
    beforeAll(() => {
        wss = startWebSocketServer(port);
    });
    afterAll(() => {
        wss.close();
    });
    test('Test handle data join leave', async () => {
        let onError = (error) => console.error(error);
        let server = new NetworkingWebRtcServer();
        server.setErrorHandler(onError);
        server.start(':'+port);
        let ch1 = '8e09b2d4-3494-40f9-9181-d8916b549db9';
        let received1;
        let onDataReceive1 = (data) => received1 = NetworkingWebRtcServer.deserialize(data);
        let client1 = await startRtcMockClient(ch1, port, onError, onDataReceive1);
        let sendData1 = (data) => client1.sendData(NetworkingWebRtcServer.serialize(data));
        let ch2 = '51176c77-0e18-4b47-b9bd-4109627a20bf';
        let received2;
        let onDataReceive2 = (data) => received2 = NetworkingWebRtcServer.deserialize(data);
        let client2 = await startRtcMockClient(ch2, port, onError, onDataReceive2);
        let sendData2 = (data) => client2.sendData(NetworkingWebRtcServer.serialize(data));
        let join1 = new JoinRequest('*', [100, 20, 3]);
        received1 = null;
        sendData1(join1);
        await delay(200);
        expect(received1).not.toBeNull();
        expect(received1.constructor.TYPE).toBe(GroupInfo.TYPE);
        expect(received1.joinInfos.length).toBe(0);
        let id1 = received1.id;
        let join2 = new JoinRequest('*', [1, 20, 44]);
        received2 = null;
        received1 = null;
        sendData2(join2);
        await delay(200);
        expect(received2).not.toBeNull();
        expect(received2.constructor.TYPE).toBe(GroupInfo.TYPE);
        expect(received2.joinInfos.length).toBe(1);
        expect(received2.joinInfos[0].id).toBe(id1);
        expect(received2.joinInfos[0].data.join(',')).toBe(join1.data.join(','));
        var id2 = received2.id;
        expect(received1).not.toBeNull();
        expect(received1.constructor.TYPE).toBe(JoinInfo.TYPE);
        expect(received1.id).toBe(id2);
        expect(received1.data.join(',')).toBe(join2.data.join(','));
        var leave1 = new LeaveInfo(id1);
        received2 = null;
        sendData1(leave1);
        await delay(200);
        expect(received2).not.toBeNull();
        expect(received2.constructor.TYPE).toBe(LeaveInfo.TYPE);
        expect(received2.id).toBe(id1);
        var leave2 = new LeaveInfo(id2);
        received1 = null;
        sendData2(leave2);
        await delay(200);
        expect(received1).toBeNull();
        client1.closeDataChannelAndPeerConnection();
        client2.closeDataChannelAndPeerConnection();
        server.shutdown();
        await delay(200);
    });
    test('Test different topics', async () => {
        let onError = (error) => console.error(error);
        let server = new NetworkingWebRtcServer();
        server.setErrorHandler(onError);
        server.start(':'+port);
        let ch1 = '878ccb69-cc8b-4f07-b0ba-7f1e03cb5b30';
        let received1;
        let onDataReceive1 = (data) => received1 = NetworkingWebRtcServer.deserialize(data);
        let client1 = await startRtcMockClient(ch1, port, onError, onDataReceive1);
        let sendData1 = (data) => client1.sendData(NetworkingWebRtcServer.serialize(data));
        let joinRequest1 = new JoinRequest('t1,t2');
        sendData1(joinRequest1);
        await delay(200);
        let ch2 = '9e01e9b0-c6b9-43fa-be94-11a76d23fcba';
        let received2;
        let onDataReceive2 = (data) => received2 = NetworkingWebRtcServer.deserialize(data);
        let client2 = await startRtcMockClient(ch2, port, onError, onDataReceive2);
        let sendData2 = (data) => client2.sendData(NetworkingWebRtcServer.serialize(data));
        let joinRequest2 = new JoinRequest('t2,t3');
        sendData2(joinRequest2);
        await delay(200);
        let ch3 = '7771f8bd-0478-4d2e-8903-fe7042b4b364';
        let received3;
        let onDataReceive3 = (data) => received3 = NetworkingWebRtcServer.deserialize(data);
        let client3 = await startRtcMockClient(ch3, port, onError, onDataReceive3);
        let sendData3 = (data) => client3.sendData(NetworkingWebRtcServer.serialize(data));
        let joinRequest3 = new JoinRequest('t4,t5');
        sendData3(joinRequest3);
        await delay(200);
        let ch4 = '375769c8-69c2-463e-a28c-a88b27747a39';
        let received4;
        let onDataReceive4 = (data) => received4 = NetworkingWebRtcServer.deserialize(data);
        let client4 = await startRtcMockClient(ch4, port, onError, onDataReceive4);
        let sendData4 = (data) => client4.sendData(NetworkingWebRtcServer.serialize(data));
        let joinRequest4 = new JoinRequest('t5,t6');
        sendData4(joinRequest4);
        await delay(200);
        var data2 = new RawData();
        received1 = null;
        received2 = null;
        received3 = null;
        received4 = null;
        sendData2(data2);
        await delay(200);
        expect(received1).not.toBeNull();
        expect(received1.constructor.TYPE).toBe(RawData.TYPE);
        expect(received3).toBeNull();
        expect(received4).toBeNull();
        var data4 = new RawData();
        received1 = null;
        received2 = null;
        received3 = null;
        received4 = null;
        sendData4(data4);
        await delay(200);
        expect(received1).toBeNull();
        expect(received2).toBeNull();
        expect(received3).not.toBeNull();
        expect(received3.constructor.TYPE).toBe(RawData.TYPE);
        client1.closeDataChannelAndPeerConnection();
        client2.closeDataChannelAndPeerConnection();
        client3.closeDataChannelAndPeerConnection();
        client4.closeDataChannelAndPeerConnection();
        server.shutdown();
        await delay(200);
    });
});